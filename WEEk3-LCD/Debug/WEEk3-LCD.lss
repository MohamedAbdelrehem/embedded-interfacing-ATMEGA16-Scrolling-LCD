
WEEk3-LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001d2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a39  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000664  00000000  00000000  00000d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a3  00000000  00000000  000013a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044b  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  7a:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_cmd>:
	
	} 
	
void LCD_cmd( char command)
{
	LCD_CONT = _BV(en);
  82:	90 e4       	ldi	r25, 0x40	; 64
  84:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA = command;
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f ec       	ldi	r24, 0xCF	; 207
  8a:	97 e0       	ldi	r25, 0x07	; 7
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	LCD_CONT = 0x00;
  94:	1b ba       	out	0x1b, r1	; 27
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	97 e0       	ldi	r25, 0x07	; 7
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_cmd+0x1e>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <init_LCD>:

void init_LCD(void){
	
	
	
	LCD_cmd(0x38);				//Initialize 8bit mode
  a4:	88 e3       	ldi	r24, 0x38	; 56
  a6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  aa:	8f ec       	ldi	r24, 0xCF	; 207
  ac:	97 e0       	ldi	r25, 0x07	; 7
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <init_LCD+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <init_LCD+0x10>
  b4:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x1);				//clear
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  bc:	8f ec       	ldi	r24, 0xCF	; 207
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <init_LCD+0x1c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <init_LCD+0x22>
  c6:	00 00       	nop
	_delay_ms(1);
	LCD_cmd(0x6);				
  c8:	86 e0       	ldi	r24, 0x06	; 6
  ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <init_LCD+0x2e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <init_LCD+0x34>
  d8:	00 00       	nop
	_delay_ms(1);

	LCD_cmd(0x0E);				//First line start
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <init_LCD+0x40>
  e8:	00 c0       	rjmp	.+0      	; 0xea <init_LCD+0x46>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <LCD_write>:
	LCD_CONT = 0x00;
	_delay_ms(1);
}

void LCD_write( char data){
	LCD_CONT = _BV(en) | _BV(rs);
  ee:	90 ec       	ldi	r25, 0xC0	; 192
  f0:	9b bb       	out	0x1b, r25	; 27
	LCD_DATA = data;
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	8f ec       	ldi	r24, 0xCF	; 207
  f6:	97 e0       	ldi	r25, 0x07	; 7
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_write+0xa>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_write+0x10>
  fe:	00 00       	nop
	_delay_ms(1);
	LCD_CONT = _BV(rs);
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	8b bb       	out	0x1b, r24	; 27
 104:	8f ec       	ldi	r24, 0xCF	; 207
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_write+0x1a>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_write+0x20>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <LCD_PASS_String>:
	_delay_ms(1);
	
}
void LCD_PASS_String (char *str)		
{	
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8c 01       	movw	r16, r24
	int	LCD_Horizontal = 16;
		for (int j=LCD_Horizontal;j>0;j--)	//shift cursor 16 times so type out of screen
 11c:	c0 e1       	ldi	r28, 0x10	; 16
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	04 c0       	rjmp	.+8      	; 0x12a <LCD_PASS_String+0x18>
		{
			LCD_cmd(0x14);
 122:	84 e1       	ldi	r24, 0x14	; 20
 124:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
	
}
void LCD_PASS_String (char *str)		
{	
	int	LCD_Horizontal = 16;
		for (int j=LCD_Horizontal;j>0;j--)	//shift cursor 16 times so type out of screen
 128:	21 97       	sbiw	r28, 0x01	; 1
 12a:	1c 16       	cp	r1, r28
 12c:	1d 06       	cpc	r1, r29
 12e:	cc f3       	brlt	.-14     	; 0x122 <LCD_PASS_String+0x10>
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	d0 e0       	ldi	r29, 0x00	; 0
 134:	03 c0       	rjmp	.+6      	; 0x13c <LCD_PASS_String+0x2a>
			LCD_cmd(0x14);
		}
	
		for(int i=0;str[i]!=0;i++)	//write the word out of the screen until the 0 end of the char (string)
		{
			LCD_write (str[i]);
 136:	0e 94 77 00 	call	0xee	; 0xee <LCD_write>
		for (int j=LCD_Horizontal;j>0;j--)	//shift cursor 16 times so type out of screen
		{
			LCD_cmd(0x14);
		}
	
		for(int i=0;str[i]!=0;i++)	//write the word out of the screen until the 0 end of the char (string)
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	f8 01       	movw	r30, r16
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	80 81       	ld	r24, Z
 144:	81 11       	cpse	r24, r1
 146:	f7 cf       	rjmp	.-18     	; 0x136 <LCD_PASS_String+0x24>
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	0d c0       	rjmp	.+26     	; 0x168 <LCD_PASS_String+0x56>
			LCD_write (str[i]);
		}
		
		for (int i=0;str[i]!=0;i++)	//shift the screen 
		{
			LCD_cmd(0x18);				//shift the entire screen left
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	80 e7       	ldi	r24, 0x70	; 112
 158:	92 e0       	ldi	r25, 0x02	; 2
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <LCD_PASS_String+0x48>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_PASS_String+0x52>
 164:	00 00       	nop
		for(int i=0;str[i]!=0;i++)	//write the word out of the screen until the 0 end of the char (string)
		{
			LCD_write (str[i]);
		}
		
		for (int i=0;str[i]!=0;i++)	//shift the screen 
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	f8 01       	movw	r30, r16
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	80 81       	ld	r24, Z
 170:	81 11       	cpse	r24, r1
 172:	ed cf       	rjmp	.-38     	; 0x14e <LCD_PASS_String+0x3c>
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	0d c0       	rjmp	.+26     	; 0x194 <LCD_PASS_String+0x82>
			LCD_cmd(0x18);				//shift the entire screen left
			_delay_ms(100);
		}	
		for (int i=0;i<LCD_Horizontal;i++)	//shift the screen 16 time so text fully go out
		{
			LCD_cmd(0x18);				//shift the entire screen left
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	80 e7       	ldi	r24, 0x70	; 112
 184:	92 e0       	ldi	r25, 0x02	; 2
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <LCD_PASS_String+0x74>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD_PASS_String+0x7e>
 190:	00 00       	nop
		for (int i=0;str[i]!=0;i++)	//shift the screen 
		{
			LCD_cmd(0x18);				//shift the entire screen left
			_delay_ms(100);
		}	
		for (int i=0;i<LCD_Horizontal;i++)	//shift the screen 16 time so text fully go out
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	c0 31       	cpi	r28, 0x10	; 16
 196:	d1 05       	cpc	r29, r1
 198:	84 f3       	brlt	.-32     	; 0x17a <LCD_PASS_String+0x68>
		{
			LCD_cmd(0x18);				//shift the entire screen left
			_delay_ms(100);
		}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <main>:
void LCD_write(char data);
void LCD_PASS_String (char *str);

int main(void)
{
	DDRB = 0xFF	;							//out	data
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;							//out en,rs
 1a8:	8a bb       	out	0x1a, r24	; 26
	
	init_LCD();								//initialize the LCD function
 1aa:	0e 94 52 00 	call	0xa4	; 0xa4 <init_LCD>
 1ae:	8f e0       	ldi	r24, 0x0F	; 15
 1b0:	97 e2       	ldi	r25, 0x27	; 39
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0xe>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x14>
 1b8:	00 00       	nop
	_delay_ms(5);						//				  x
	LCD_cmd (0x0C);						//hide cursor "CSE_"
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_cmd>

  LCD_PASS_String("CSE 22 Mohamed");				//edit from the main code so it scroll
 1c0:	80 e6       	ldi	r24, 0x60	; 96
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 89 00 	call	0x112	; 0x112 <LCD_PASS_String>
  //while (1)								// so it scroll infinitely
  //{				
	  
  //}

	}
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
